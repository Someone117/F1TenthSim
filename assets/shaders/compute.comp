#version 450

struct Particle {
	vec2 position;
	vec2 velocity;
    vec4 color;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout(binding = 3, rgba32f) uniform image2D outputImage;

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    uint index = gl_GlobalInvocationID.x;

    Particle particleIn = particlesIn[index];

    particlesOut[index].position = particleIn.position + particleIn.velocity.xy * ubo.deltaTime;
    particlesOut[index].velocity = particleIn.velocity;

    float near = 0.5;

    // Flip movement at window border
    if ((particlesOut[index].position.x <= -near) || (particlesOut[index].position.x >= near)) {
        particlesOut[index].velocity.x = -particlesOut[index].velocity.x;
    }
    if ((particlesOut[index].position.y <= -near) || (particlesOut[index].position.y >= near)) {
        particlesOut[index].velocity.y = -particlesOut[index].velocity.y;
    }
    // Map position from range [-1, 1] to [0, 1]
    float mappedX = (particlesOut[index].position.xy[0] + 1.0) * 0.5;
    float mappedY = (particlesOut[index].position.xy[1] + 1.0) * 0.5;
    
    // for some reason this does not work
    imageStore(outputImage, ivec2(particlesOut[index].position.xy[0], particlesOut[index].position.xy[1]), particlesOut[index].color);
    // imageStore(outputImage, ivec2(0, 0), vec4(0.0));

}